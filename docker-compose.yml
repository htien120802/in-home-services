version: '1.0'

# Define services
services:
  # Database Service (Mysql)
  db:
    build: 
      context: home-service-database
      dockerfile: Dockerfile
      args:
        MYSQL_ROOT_PASSWORD: 123456
    image: huutien120802/home-service-database
    container_name: home-service-database-container
    ports:
      - 3307:3306
    restart: always
    environment:
      MYSQL_DATABASE: service_db
      MYSQL_ROOT_PASSWORD: 123456
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - app-network

  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: home-service-server # Use an image built from the specified dockerfile in the `home-service-server` directory.
      dockerfile: Dockerfile
    image: huutien120802/home-service-server
    container_name: home-service-server-container
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_HOST: db
      SPRING_DATASOURCE_PORT: 3306
      SPRING_DATASOURCE_DB_NAME: service_db
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 123456
      ORIGIN_URL: http://103.146.23.19  # Change host to public IP when deploy
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - app-network

  # Frontend Service 
  app-client:
    build:
      context: home-service-client # Use an image built from the specified dockerfile in the `home-service-client` directory.
      dockerfile: Dockerfile
      args:
        REACT_APP_API_URL: http://app-server:8080 # Change host to public IP when deploy
    image: huutien120802/home-service-client
    container_name: home-service-client-container
    ports:
      - "80:80" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - app-network

# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  app-network:
    driver: bridge
